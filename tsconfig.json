{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */
    /* Projects */
    "incremental": false, /* Enable incremental compilation */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./",                          /* Specify the folder for .tsbuildinfo incremental compilation files. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */
    /* Language and Environment */
    "target": "ES6", /* 为发出的 JavaScript 设置 JavaScript 语言版本并包含兼容的库声明. */
    "lib": [
      "ES2020",
      "dom"
    ], /* 指定一组描述目标运行时环境的捆绑库声明文件. */
    "jsx": "react-jsx", /* Specify what JSX code is generated. */
    "experimentalDecorators": true, /* 装饰器支持 */
    "emitDecoratorMetadata": true, /* 元数据类型支持 */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h' */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.` */
    // "reactNamespace": "",                             /* Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    /* Modules */
    "module": "ESNext", /* 指定生成什么模块代码. */
    "rootDir": "./src/", /* Specify the root folder within your source files. */
    "moduleResolution": "node",                       /* Specify how TypeScript looks up a file from a given module specifier. */
    "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    "paths": {
      "@assets/*": [
        "./src/assets/*"
      ],
      "@comps/*": [
        "./src/components/*"
      ],
      "@pages/*": [
        "./src/pages/*"
      ],
      "@service/*": [
        "./src/service/*"
      ],
      "@src/*": [
        "./src/*"
      ]
    }, /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like `./node_modules/@types`. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "resolveJsonModule": true,                        /* Enable importing .json files */
    // "noResolve": true,                                /* Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project. */
    /* JavaScript Support */
    "allowJs": false, /* 允许 JavaScript 文件成为您程序的一部分。 使用 `checkJS` 选项从这些文件中获取错误 */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */
    /* Emit */
    "declaration": true, /* 生成 '.d.ts' file. */
    "declarationMap": true, /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    "sourceMap": true, /* Create source map files for emitted JavaScript files. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output. */
    "outDir": "./dist/", /* Specify an output folder for all emitted files. */
    "removeComments": true, /* 不要输出注释. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have `@internal` in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like `__extends` in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing `const enum` declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true, /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true, /* Ensure that casing is correct in imports. */
    /* Type Checking */
    "strict": true, /* Enable all strict type-checking options. */
    "noImplicitAny": true, /* 为隐含的“any”类型的表达式和声明启用错误报告 */
    "strictNullChecks": true, /* 类型检查时，考虑 `null` 和 `undefined`. */
    "strictFunctionTypes": true, /* 分配函数时，检查以确保参数和返回值是子类型兼容的. */
    "strictBindCallApply": true, /* 检查 `bind`、`call` 和 `apply` 方法的参数是否与原始函数匹配. */
    "strictPropertyInitialization": true, /* 检查在构造函数中声明但未设置的类属性. */
    "noImplicitThis": true, /* 当 `this` 的类型为 `any` 时启用错误报告. */
    "useUnknownInCatchVariables": true, /* 将 catch 子句变量输入为“unknown”而不是“any” */
    "alwaysStrict": true, /* Ensure 'use strict' is always emitted. */
    "noUnusedLocals": false, /* 未读取局部变量时启用错误报告 */
    "noUnusedParameters": false, /* 未读取函数参数时引发错误 */
    "exactOptionalPropertyTypes": true, /* 将可选属性类型解释为书面形式，而不是添加“未定义”*/
    "noImplicitReturns": false, /* 为未在函数中显式返回的代码路径启用错误报告 */
    "noFallthroughCasesInSwitch": false, /* 为 switch 语句中的失败案例启用错误报告 */
    "noUncheckedIndexedAccess": true, /* 在索引签名结果中包含“未定义” */
    "noImplicitOverride": true, /* 确保派生类中的覆盖成员使用覆盖修饰符进行标记 */
    "noPropertyAccessFromIndexSignature": true, /* 强制对使用索引类型声明的键使用索引访问器 */
    // "allowUnusedLabels": true,                        /* 禁用未使用标签的错误报告 */
    // "allowUnreachableCode": true,                     /* 禁用无法访问代码的错误报告 */
    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* 跳过 TypeScript 中包含的类型检查 .d.ts 文件 */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  },
  "exclude": [
    "node_modules",
    "public",
    "dist",
    "test",
    "config"
  ]
}